排序：

给定两个数组，编写一个函数来计算它们的交集。

示例 1:

输入: nums1 = [1,2,2,1], nums2 = [2,2]
输出: [2]
示例 2:

输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出: [9,4]
说明:

输出结果中的每个元素一定是唯一的。
我们可以不考虑输出结果的顺序。

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        set<int> nums1Set(nums1.begin(),nums1.end());
        set<int> resSet;

        for(int i =0; i < nums2.size();++i)
            if(nums1Set.find(nums2[i]) != nums1Set.end())
                resSet.insert(nums2[i]);

        return  vector<int>(resSet.begin(),resSet.end());
    }
};

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        multiset<int> inset(nums1.begin(), nums1.end());
        multiset<int> inset2(nums2.begin(), nums2.end());
        int i=0;
        vector<int> ret_vec;
        
        set_intersection(inset.begin(),inset.end(),inset2.begin(),inset2.end(),inserter(ret_vec,ret_vec.begin()));
        
        
        return ret_vec;
    }
};

给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。

对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。

你可以返回任何满足上述条件的数组作为答案。

 

示例：

输入：[4,2,5,7]
输出：[4,5,2,7]
解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。

class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& A) {
        int i=0,j=0;
        int tmp=0;
        
        while(i<A.size())
        {
            if(i%2==0 && A[i]%2==0)
            {
                i++;
                if(i>j)
                {
                    j=i;
                }
            }
            else if(i%2==0 && A[i] %2 != 0)
            {
                while(j<A.size())
                {
                    j++;
                    if(A[j]%2 == 0)
                    {
                        tmp = A[i];
                        A[i] = A[j];
                        A[j] = tmp;
                    
                        i++;
                        j=i;   
                        break;
                    }
                }
            }
            else if(i%2!=0 && A[i]%2 != 0)
            {
                i++;
                if(i>j)
                {
                    j=i;
                }
            }
            else if(i%2 != 0 && A[i]%2 ==0)
            {
                while(j<A.size())
                {
                    j++;
                    if(A[j]%2 !=0)
                    {
                       tmp = A[i];
                        A[i] = A[j];
                        A[j] = tmp;
                    
                        i++;
                        j=i;   
                        break; 
                    }
                }
            }
        }
        return A;
    }
};

给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。

如果不能形成任何面积不为零的三角形，返回 0。

 

示例 1：

输入：[2,1,2]
输出：5
示例 2：

输入：[1,2,1]
输出：0
示例 3：

输入：[3,2,3,4]
输出：10
示例 4：

输入：[3,6,2,3]
输出：8

class Solution {
public:
    int largestPerimeter(vector<int>& A) {
        sort(A.begin(), A.end(), greater<>());
        int a=0,b=0,c=0;
        int i=0;
        
        for(i=0;i<A.size()-2;i++)
        {
            a = A[i];
            b = A[i+1];
            c = A[i+2];
            if(a<b+c && a>b-c)
            {
                return a+b+c;
            }
        }
        return 0;
    }
};
