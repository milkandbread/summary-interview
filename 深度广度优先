深度优先遍历和广度优先遍历：

给定两个二叉树，编写一个函数来检验它们是否相同。

如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。

示例 1:

输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

输出: true
示例 2:

输入:      1          1
          /           \
         2             2

        [1,2],     [1,null,2]

输出: false
示例 3:

输入:       1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

输出: false

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (!p && !q) return true;
       if ((p && !q) || (!p && q) || (p->val != q->val)) 
            return false;
       return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);
    }
};

给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
说明:

如果你可以运用递归和迭代两种方法解决这个问题，会很加分。

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root)
        {
            return true;
        }
        
        return _isSysmmetric(root->left, root->right);
    }
    
    bool _isSysmmetric(TreeNode *left, TreeNode *right)
    {
        if(!left && !right)
        {
            return true;
        }
        if(!left || !right)
        {
            return false;
        }
        return left->val == right->val && _isSysmmetric(left->left, right->right) && _isSysmmetric(left->right, right->left);
    }
};

给定一个二叉树，找出其最大深度。

二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。

说明: 叶子节点是指没有子节点的节点。

示例：
给定二叉树 [3,9,20,null,null,15,7]，

    3
   / \
  9  20
    /  \
   15   7
返回它的最大深度 3 。


class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)
        {
            return 0;
        }
        else if(root->left == NULL && root->right == NULL)
        {
            return 1;
        }
        else
        {
            int left = maxDepth(root->left);
            int right = maxDepth(root->right);
            return 1+((left>right)?left:right);
        }
    }
};

给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]

class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int> > res;
        if (root == NULL) return res;

        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            vector<int> oneLevel;
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                TreeNode *node = q.front();
                q.pop();
                oneLevel.push_back(node->val);
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
            res.insert(res.begin(), oneLevel);
        }
        return res;
    }
};

将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。

本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。

示例:

给定有序数组: [-10,-3,0,5,9],

一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：

      0
     / \
   -3   9
   /   /
 -10  5


 class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return sortedArryToBST(nums, 0, nums.size()-1);
    }
    
    TreeNode* sortedArryToBST(vector<int>& nums,int left, int right)
    {
        if(left>right)
        {
            return NULL;
        }
        int mid = (left+right)/2;
        TreeNode *cur = new TreeNode(nums[mid]);
        cur->left = sortedArryToBST(nums,left,mid-1);
        cur->right = sortedArryToBST(nums,mid+1,right);
        
        return cur;
    }
};

给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。

示例 1:

给定二叉树 [3,9,20,null,null,15,7]

    3
   / \
  9  20
    /  \
   15   7
返回 true 。

示例 2:

给定二叉树 [1,2,2,3,3,null,null,4,4]

       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
返回 false 。

class Solution {
public:
    bool isBalanced(TreeNode* root) {
       if(root == NULL)
       {
           return true;
       }
        int left = maxDepth(root->left);
        int right = maxDepth(root->right);
        return abs(left-right) < 2&&
            isBalanced(root->left) &&
            isBalanced(root->right);
    }
    int maxDepth(TreeNode* root)
    {
        if(root == NULL)
        {
            return 0;
        }
        int leftDepth = maxDepth(root->left);
        int rightDepth = maxDepth(root->right);
        
        return 1+(leftDepth>rightDepth?leftDepth:rightDepth);
    }
};

给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明: 叶子节点是指没有子节点的节点。

示例:

给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回它的最小深度  2.

class Solution {
public:
    int minDepth(TreeNode* root) {
      if(root==NULL)
            return 0;
        int left=minDepth(root->left);
        int right=minDepth(root->right);
        if(left&&right)
            return left>right?right+1:left+1;//如果两边都不是空节点
        else
            return left>right?left+1:right+1;  
    }
};

给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。

说明: 叶子节点是指没有子节点的节点。

示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。

class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if(root==NULL){
            return false;
         }
        int t=sum-root->val;
        if(root->left==NULL&& root->right==NULL){
             return t==0 ? true :false;
        }  
        //递归调用函数，分别判断根结点的左节点和右节点
        return hasPathSum(root->left,t) || hasPathSum(root->right,t);
    }
};

给定一个二叉树，返回所有从根节点到叶子节点的路径。

说明: 叶子节点是指没有子节点的节点。

示例:

输入:

   1
 /   \
2     3
 \
  5

输出: ["1->2->5", "1->3"]

解释: 所有根节点到叶子节点的路径为: 1->2->5, 1->3

class Solution {
public:
    void binaryTreePathsCore(TreeNode* root, vector<string> &res, string val) {
	   if (root && !root->left && !root->right) {
		   res.push_back(val);
		   return;
	   }
	   if (root->left) {
		   binaryTreePathsCore(root->left, res, val + "->" + to_string(root->left->val));
	   }
	   if (root->right) {
		   binaryTreePathsCore(root->right, res, val + "->" + to_string(root->right->val));
	   }	   
   }

    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> res;
	   if (!root) {
		   return res;
	   }
	   binaryTreePathsCore(root, res, to_string(root->val));
	   return res;    
    }
};

给定一个 N 叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。

例如，给定一个 3叉树 :

                1
             /  |  \
            3   2   4
           / \   
          5   6     


返回其层序遍历:

[
     [1],
     [3,2,4],
     [5,6]
]

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> vec;
        if(root == NULL)
        {
            return vec;
        }
        queue<Node *> que;
        que.push(root);
        int i=0;
        
        while(!que.empty())
        {
            vector<int> v;
            int size = que.size();
            while(size--)
            {
                Node *tmp = que.front();
                v.push_back(tmp->val);
                que.pop();
                for(i=0;i<tmp->children.size();i++)
                {
                    que.push(tmp->children[i]);
                }
            }
            vec.push_back(v);
        }
        
        return vec;
    }
};

给定一个 N 叉树，找到其最大深度。

最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。

例如，给定一个 3叉树 :

                1
             /  |  \
            3   2   4
           / \   
          5   6  


我们应返回其最大深度，3。

class Solution {
public:
    int maxDepth(Node* root) {
       if(root==NULL)
            return 0;
        int height =0;
        Queue<Node> queue = new LinkedList<Node>();
        queue.add(root);
        int size = queue.size();
        while (!queue.isEmpty())
        {
           Node tmp =  queue.poll();
           for(Node node:tmp.children)
               if(node!=null)
                    queue.add(node);
            size--;
            if(size==0)
            {
                size=queue.size();
                height++;
            }
        }
        return height;
    }
};

给定一个保存员工信息的数据结构，它包含了员工唯一的id，重要度 和 直系下属的id。

比如，员工1是员工2的领导，员工2是员工3的领导。他们相应的重要度为15, 10, 5。那么员工1的数据结构是[1, 15, [2]]，员工2的数据结构是[2, 10, [3]]，员工3的数据结构是[3, 5, []]。注意虽然员工3也是员工1的一个下属，但是由于并不是直系下属，因此没有体现在员工1的数据结构中。

现在输入一个公司的所有员工信息，以及单个员工id，返回这个员工和他所有下属的重要度之和。

示例 1:

输入: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1
输出: 11
解释:
员工1自身的重要度是5，他有两个直系下属2和3，而且2和3的重要度均为3。因此员工1的总重要度是 5 + 3 + 3 = 11。

class Solution {
public:
    int getImportance(vector<Employee*> employees, int id) {
        if(employees.size()<=0)
        {
            return 0;
        }
        int i=0,ret=0,j=0;
        
        for(i=0;i<employees.size();i++)
        {
            if(employees[i]->id == id)
            {
                ret += employees[i]->importance;
                for(j=0;j<employees[i]->subordinates.size();j++)
                {
                    ret += getImportance(employees,employees[i]->subordinates[j]);
                }
            }
        }
        
        return ret;
    }
};

请考虑一颗二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。

              3
             /  \
            5    1
           / \   | \
          6   2  9  8
             /  \      
            7    4      

举个例子，如上图所示，给定一颗叶值序列为 (6, 7, 4, 9, 8) 的树。

如果有两颗二叉树的叶值序列是相同，那么我们就认为它们是 叶相似 的。

如果给定的两个头结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。

class Solution {
public:
    
    void leafTree(TreeNode *root, vector<int> &leaf)
    {
        if( root == NULL)
        {
            return ;
        }
        if(root->left == NULL && root->right == NULL)
        {
            leaf.push_back(root->val);
        }
        leafTree(root->left, leaf);
        leafTree(root->right, leaf);
        
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> leaf1;
        vector<int> leaf2;
        int i=0;
        
        leafTree(root1,leaf1);
        leafTree(root2,leaf2);
        
        if(leaf1.size() == leaf2.size())
        {
            for(i=0;i<leaf2.size();i++)
            {
                if(leaf1[i] != leaf2[i])
                {
                    return false;
                }
            }
            return true;
        }
        return false;
    }
};

给定一个树，按中序遍历重新排列树，使树中最左边的结点现在是树的根，并且每个结点没有左子结点，只有一个右子结点。

 

示例 ：

输入：[5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

输出：[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9 
class Solution {
public:
    void inOrder(TreeNode* root, vector<int>& lst){
        if(root){
            inOrder(root->left, lst);
            lst.push_back(root->val);
            inOrder(root->right, lst);
        }
    }
    
    
    TreeNode* increasingBST(TreeNode* root) {
        vector<int> lst;
        inOrder(root, lst);
        TreeNode* _root = NULL;
        TreeNode* cur = NULL;
        for(int val : lst){
            if(_root == NULL){
                _root = new TreeNode(val);
                cur = _root;
            }else{
                cur->right = new TreeNode(val);
                cur = cur->right;
            }
        }
        return _root;
    }
};

在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。

如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。

我们给出了具有唯一值的二叉树的根节点 root，以及树中两个不同节点的值 x 和 y。

只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true。否则，返回 false。

 

示例 1：
        1
       /  \
      2    3
     /
    4

输入：root = [1,2,3,4], x = 4, y = 3
输出：false
示例 2：
        1
      /   \
     2     3
      \     \
       4     5

输入：root = [1,2,3,null,4,null,5], x = 5, y = 4
输出：true
示例 3：
         1
       /   \
      2    3
       \
        4

输入：root = [1,2,3,null,4], x = 2, y = 3
输出：false

class Solution {
public:
    bool getPath(TreeNode* root, int x, vector<int>& path){
        if(root == NULL){
            return false;
        }else {
            path.push_back(root->val);
            if(root->val != x){
                if(getPath(root->left, x, path)){
                    return true;
                }
                if(getPath(root->right, x, path)){
                    return true;
                }
                path.pop_back();
                return false;
            }else{
                return true;
            }
        }
    }
    
    bool isCousins(TreeNode* root, int x, int y) {
        vector<int> path1, path2;
        getPath(root, x, path1);
        getPath(root, y, path2);
        if(path1.size() != path2.size()){
            return false;
        }else{
            path1.pop_back();
            path2.pop_back();
            return path1.back() != path2.back();
        }
    }
};


给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。

示例:
输入: S = "a1b2"
输出: ["a1b2", "a1B2", "A1b2", "A1B2"]

输入: S = "3z4"
输出: ["3z4", "3Z4"]

输入: S = "12345"
输出: ["12345"]

class Solution {
	public:
		void backtrace(string s, vector<string> vec, int ind)
		{
			if(ind > s.length())
			{
				vec.push_back(s);
				return ;
			}
			if(s[ind] >= 'A' && s[ind] <= 'Z')
			{
				s[ind] += 32;
				backtrace(s, vec,ind);
				s[ind] -= 32;
			}
			if(s[ind] >= 'a' && s[ind] <= 'z')
			{
				s[ind] -= 32;
				backtrace(s, vec,ind);
				s[ind] += 32;
			}
			backtrace(s,vec,ind+1);
		}
		vector<string> letterCasePermutation(string S) 
		{
			vector<string> vec;
			backtrace(S, vec,0);

			return vec;
		}
}
